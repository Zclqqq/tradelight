{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/log-day/page.tsx"],"sourcesContent":["\n\"use client\";\n\nimport * as React from \"react\";\nimport { format } from \"date-fns\";\nimport { ArrowLeft, Plus, Trash2, CalendarIcon, Upload, ChevronDown, X, ChevronsUpDown } from \"lucide-react\";\nimport Link from \"next/link\";\nimport { useFieldArray, useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport Image from \"next/image\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { cn } from \"@/lib/utils\";\nimport { useRouter, useSearchParams } from \"next/navigation\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useDebouncedCallback }from \"use-debounce\";\nimport { Separator } from \"@/components/ui/separator\";\n\n\nconst detailedSessionTradeSchema = z.object({\n  sessionName: z.string(),\n  movementType: z.enum([\"none\", \"expansion\", \"retracement\", \"continuation\", \"reversal\"]).default(\"none\"),\n  direction: z.enum([\"none\", \"up\", \"down\", \"both\"]).default(\"none\"),\n  tookHighLow: z.enum([\"none\", \"took-high\", \"took-low\", \"took-both\"]).optional().default(\"none\"),\n  targetSession: z.enum([\"none\", \"asia\", \"london\", \"new-york\", \"previous-day\"]).default(\"none\"),\n});\n\nconst tradeSchema = z.object({\n  instrument: z.string().min(1, \"Instrument is required.\"),\n  model: z.string().optional().default(\"\"),\n  pnl: z.coerce.number(),\n  entryTime: z.string().optional().default(\"\"),\n  exitTime: z.string().optional().default(\"\"),\n  contracts: z.coerce.number().optional(),\n  tradeTp: z.coerce.number().optional(),\n  tradeSl: z.coerce.number().optional(),\n  totalPoints: z.coerce.number().optional(),\n  analysisImage: z.string().optional().default(\"\"),\n  sessions: z.array(detailedSessionTradeSchema).optional(),\n});\n\nconst dayLogSchema = z.object({\n  date: z.date(),\n  notes: z.string().optional().default(\"\"),\n  trades: z.array(tradeSchema),\n});\n\nexport type DayLog = z.infer<typeof dayLogSchema>;\n\nconst sessionOptions = [\"Asia\", \"London\", \"New York\", \"Lunch\", \"PM Session\"];\nconst movementTypeOptions = [ {value: \"expansion\", label: \"Expansion\"}, {value: \"retracement\", label: \"Retracement\"}, {value: \"continuation\", label: \"Continuation\"}, {value: \"reversal\", label: \"Reversal\"}];\nconst directionOptions = [{value: \"up\", label: \"Up\"}, {value: \"down\", label: \"Down\"}, {value: \"both\", label: \"Both\"}];\nconst tookHighLowOptions = [{value: \"took-high\", label: \"Took High\"}, {value: \"took-low\", label: \"Took Low\"}, {value: \"took-both\", label: \"Took Both\"}];\nconst targetSessionOptions = [{value: \"asia\", label: \"Asia\"}, {value: \"london\", label: \"London\"}, {value: \"new-york\", label: \"New York\"}, {value: \"previous-day\", label: \"Previous Day\"}];\n\nconst instrumentOptions = [\"MNQ\", \"NQ\", \"ES\", \"MES\"];\nconst instrumentPointValues: { [key: string]: number } = {\n    \"MNQ\": 2,\n    \"NQ\": 20,\n    \"ES\": 50,\n    \"MES\": 5,\n};\n\n\nconst TradeDataField = ({ label, children }: { label: string, children: React.ReactNode }) => {\n    return (\n        <div>\n            <FormLabel className=\"text-xs font-medium tracking-widest uppercase text-muted-foreground\">{label}</FormLabel>\n            {children}\n        </div>\n    );\n};\n\n\nexport default function LogDayPage() {\n    const { toast } = useToast();\n    const router = useRouter();\n    const searchParams = useSearchParams();\n    const [isEditingPnl, setIsEditingPnl] = React.useState(false);\n    const pnlInputRef = React.useRef<HTMLInputElement>(null);\n    const fileInputRef = React.useRef<HTMLInputElement>(null);\n    const [isClient, setIsClient] = React.useState(false);\n    \n    const [models, setModels] = React.useState<string[]>([]);\n    const [popoverOpen, setPopoverOpen] = React.useState(false);\n    const [newModel, setNewModel] = React.useState('');\n\n    React.useEffect(() => {\n        setIsClient(true);\n        const savedModels = localStorage.getItem('trade-models');\n        if (savedModels) {\n            setModels(JSON.parse(savedModels));\n        }\n    }, []);\n\n    const addModel = (model: string) => {\n        const updatedModels = [...models, model];\n        setModels(updatedModels);\n        localStorage.setItem('trade-models', JSON.stringify(updatedModels));\n        form.setValue('trades.0.model', model);\n        setNewModel('');\n        setPopoverOpen(false);\n    };\n\n    const deleteModel = (modelToDelete: string) => {\n        const updatedModels = models.filter(m => m !== modelToDelete);\n        setModels(updatedModels);\n        localStorage.setItem('trade-models', JSON.stringify(updatedModels));\n        if (form.getValues('trades.0.model') === modelToDelete) {\n            form.setValue('trades.0.model', '');\n        }\n    };\n\n    const defaultSessions = React.useMemo(() => sessionOptions.map(name => ({\n        sessionName: name,\n        movementType: \"none\" as const,\n        direction: \"none\" as const,\n        tookHighLow: \"none\" as const,\n        targetSession: \"none\" as const,\n    })), []);\n\n    const form = useForm<z.infer<typeof dayLogSchema>>({\n        resolver: zodResolver(dayLogSchema),\n        defaultValues: {\n            date: new Date(),\n            notes: \"\",\n            trades: [{ \n                instrument: \"NQ\", \n                pnl: 0, \n                sessions: defaultSessions,\n                analysisImage: \"\",\n                model: \"\",\n                entryTime: \"\",\n                exitTime: \"\",\n                contracts: undefined,\n                tradeTp: undefined,\n                tradeSl: undefined,\n                totalPoints: undefined,\n            }],\n        },\n    });\n    \n    const { control, getValues, setValue, watch } = form;\n\n    const { fields, update } = useFieldArray({\n        control: form.control,\n        name: \"trades\",\n    });\n    \n    const saveChanges = React.useCallback((values: DayLog) => {\n        const key = `trade-log-${format(values.date, 'yyyy-MM-dd')}`;\n        \n        const tradesWithFilteredSessions = values.trades.map(trade => ({\n            ...trade,\n            sessions: trade.sessions?.filter(session => session.movementType && session.movementType !== \"none\")\n        }));\n        \n        const dataToSave = {\n            ...values,\n            trades: tradesWithFilteredSessions,\n            date: values.date.toISOString(), \n        };\n        localStorage.setItem(key, JSON.stringify(dataToSave));\n        \n        const allLogs = Object.keys(localStorage)\n            .filter(k => k.startsWith('trade-log-'))\n            .map(k => {\n                try {\n                    return JSON.parse(localStorage.getItem(k) as string)\n                } catch {\n                    return null;\n                }\n            }).filter(Boolean);\n\n        localStorage.setItem('all-trades', JSON.stringify(allLogs));\n    }, []);\n\n    const debouncedSaveChanges = useDebouncedCallback(saveChanges, 2000);\n    \n    React.useEffect(() => {\n        if (!isClient) return;\n        const subscription = watch((value) => {\n            debouncedSaveChanges(value as DayLog);\n        });\n        return () => subscription.unsubscribe();\n    }, [isClient, watch, debouncedSaveChanges]);\n\n    const calculatePnl = () => {\n        const values = getValues();\n        const watchedInstrument = values.trades[0].instrument;\n        const watchedPoints = values.trades[0].totalPoints;\n        const watchedContracts = values.trades[0].contracts;\n\n        const pointValue = instrumentPointValues[watchedInstrument] || 0;\n        const points = watchedPoints || 0;\n        const contracts = watchedContracts || 0;\n        \n        if (points !== 0 && contracts !== 0) {\n            const calculatedPnl = points * pointValue * contracts;\n            if (getValues(\"trades.0.pnl\") !== calculatedPnl) {\n                setValue(\"trades.0.pnl\", calculatedPnl, { shouldDirty: true });\n            }\n        }\n    };\n\n\n    React.useEffect(() => {\n        if (!isClient) return;\n        const dateParam = searchParams.get('date');\n        const date = dateParam ? new Date(dateParam) : new Date();\n        const key = `trade-log-${format(date, 'yyyy-MM-dd')}`;\n        const savedData = localStorage.getItem(key);\n\n        const emptyTrade = {\n            instrument: \"NQ\",\n            pnl: 0,\n            analysisImage: \"\",\n            model: \"\",\n            entryTime: \"\",\n            exitTime: \"\",\n            contracts: undefined,\n            tradeTp: undefined,\n            tradeSl: undefined,\n            totalPoints: undefined,\n        };\n        \n        if (savedData) {\n            const parsedData = JSON.parse(savedData);\n            parsedData.date = new Date(parsedData.date);\n\n            const savedTrade = parsedData.trades?.[0] || {};\n            \n            const sessionMap = new Map((savedTrade.sessions || []).map((s: any) => [s.sessionName, s]));\n            const fullSessions = sessionOptions.map(name => ({\n                sessionName: name,\n                movementType: sessionMap.get(name)?.movementType || \"none\",\n                direction: sessionMap.get(name)?.direction || \"none\",\n                tookHighLow: sessionMap.get(name)?.tookHighLow || \"none\",\n                targetSession: sessionMap.get(name)?.targetSession || \"none\",\n            }));\n            \n            const tradeWithDefaults = {\n                ...emptyTrade,\n                ...savedTrade,\n                sessions: fullSessions,\n                contracts: savedTrade.contracts ?? undefined,\n                tradeTp: savedTrade.tradeTp ?? undefined,\n                tradeSl: savedTrade.tradeSl ?? undefined,\n                totalPoints: savedTrade.totalPoints ?? undefined,\n            };\n\n            const dataWithDefaults = {\n                date: parsedData.date,\n                notes: parsedData.notes || \"\",\n                trades: [tradeWithDefaults],\n            };\n            \n            form.reset(dataWithDefaults);\n        } else {\n             form.reset({\n                date: date,\n                notes: \"\",\n                trades: [{...emptyTrade, sessions: defaultSessions }],\n             });\n        }\n    }, [searchParams, form, defaultSessions, isClient]);\n    \n    const handleImagePaste = (event: React.ClipboardEvent<HTMLDivElement>) => {\n        const items = event.clipboardData.items;\n        for (let i = 0; i < items.length; i++) {\n            if (items[i].type.indexOf(\"image\") !== -1) {\n                const file = items[i].getAsFile();\n                if (file) {\n                    const reader = new FileReader();\n                    reader.onload = (e) => {\n                        form.setValue(\"trades.0.analysisImage\", e.target?.result as string, { shouldDirty: true });\n                    };\n                    reader.readAsDataURL(file);\n                }\n            }\n        }\n    };\n\n    const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const file = event.target.files?.[0];\n        if (file) {\n            const reader = new FileReader();\n            reader.onload = (e) => {\n                form.setValue(\"trades.0.analysisImage\", e.target?.result as string, { shouldDirty: true });\n            };\n            reader.readAsDataURL(file);\n        }\n    };\n\n    const handleRemoveImage = () => {\n        form.setValue(\"trades.0.analysisImage\", \"\", { shouldDirty: true });\n    };\n    \n    const handleBackClick = async (e: React.MouseEvent<HTMLAnchorElement>) => {\n        e.preventDefault();\n        await saveChanges(form.getValues());\n        toast({\n            title: \"Changes Saved!\",\n            description: \"Your recap has been updated.\",\n        });\n        router.push('/');\n    };\n    \n    const allTrades = form.watch(\"trades\");\n    const totalPnl = allTrades.reduce((sum, trade) => sum + (trade.pnl || 0), 0);\n    const analysisImage = form.watch(\"trades.0.analysisImage\");\n\n\n    const handlePnlDoubleClick = () => {\n        setIsEditingPnl(true);\n    };\n\n    const handlePnlBlur = () => {\n        setIsEditingPnl(false);\n    };\n\n    const handlePnlKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter') {\n            const newPnl = parseFloat(event.currentTarget.value);\n            if (!isNaN(newPnl) && fields[0]) {\n                update(0, {...fields[0], pnl: newPnl });\n            }\n            setIsEditingPnl(false);\n        } else if (event.key === 'Escape') {\n            setIsEditingPnl(false);\n        }\n    };\n    \n    React.useEffect(() => {\n        if (isEditingPnl && pnlInputRef.current) {\n            pnlInputRef.current.focus();\n            pnlInputRef.current.select();\n        }\n    }, [isEditingPnl]);\n    \n    const filteredModels = newModel\n        ? models.filter(m => m.toLowerCase().includes(newModel.toLowerCase()))\n        : models;\n        \n    const pnlValue = fields[0]?.pnl ?? totalPnl;\n    const pnlColorClass = pnlValue > 0 ? 'text-green-500' : pnlValue < 0 ? 'text-red-500' : 'text-foreground';\n\n\n  return (\n    <div className=\"flex flex-col h-screen max-h-screen text-foreground bg-background\">\n        <header className=\"relative flex-shrink-0 flex items-center justify-center h-16 px-4 md:px-8 border-b\">\n            <Button variant=\"ghost\" size=\"icon\" asChild className=\"absolute left-4 top-1/2 -translate-y-1/2\">\n                <a href=\"/\" onClick={handleBackClick}>\n                    <ArrowLeft />\n                    <span className=\"sr-only\">Back</span>\n                </a>\n            </Button>\n            <h1 className=\"text-xl font-bold font-headline\">\n                {isClient ? `Today's Recap ${format(form.watch(\"date\"), \"M/d/yy\")}` : ' '}\n            </h1>\n        </header>\n\n        <main className=\"flex-1 overflow-hidden p-4 md:p-6\">\n            <Form {...form}>\n                <form className=\"h-full\">\n                    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 h-full\">\n                        <div className=\"flex flex-col space-y-6\">\n                           <Card>\n                                <CardContent className=\"p-4 grid grid-cols-2 gap-x-6 gap-y-2\">\n                                    <div className=\"col-span-2 flex items-center gap-4\">\n                                        <div onDoubleClick={handlePnlDoubleClick} className=\"flex-1\">\n                                            <FormLabel className=\"text-xs font-medium tracking-widest uppercase text-muted-foreground\">PNL</FormLabel>\n                                            {isEditingPnl ? (\n                                                <Input\n                                                    ref={pnlInputRef}\n                                                    type=\"number\"\n                                                    defaultValue={pnlValue}\n                                                    onBlur={handlePnlBlur}\n                                                    onKeyDown={handlePnlKeyDown}\n                                                    className={cn(\n                                                        `text-4xl font-bold font-headline h-auto p-0 border-0 focus-visible:ring-0 bg-transparent`,\n                                                        `[appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none`,\n                                                        pnlColorClass\n                                                    )}\n                                                />\n                                            ) : (\n                                                <p className={cn(`text-4xl font-bold font-headline`, pnlColorClass)}>\n                                                    {pnlValue.toLocaleString(\"en-US\", { style: \"currency\", currency: \"USD\"})}\n                                                </p>\n                                            )}\n                                        </div>\n                                         <div className=\"w-px bg-border h-12\"></div>\n                                        <div className=\"flex-1\">\n                                            <FormField\n                                                control={form.control}\n                                                name=\"date\"\n                                                render={({ field }) => (\n                                                    <FormItem className=\"flex flex-col\">\n                                                        <FormLabel className=\"text-xs font-medium tracking-widest uppercase text-muted-foreground\">Date</FormLabel>\n                                                        <Popover>\n                                                            <PopoverTrigger asChild>\n                                                            <FormControl>\n                                                                <Button\n                                                                variant={\"ghost\"}\n                                                                className={cn(\n                                                                    \"w-full justify-start text-left font-normal p-0 h-auto text-base hover:bg-transparent hover:text-foreground\",\n                                                                    !field.value && \"text-muted-foreground\"\n                                                                )}\n                                                                >\n                                                                {field.value && isClient ? (\n                                                                    format(field.value, \"PPP\")\n                                                                ) : (\n                                                                    <span>Pick a date</span>\n                                                                )}\n                                                                <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n                                                                </Button>\n                                                            </FormControl>\n                                                            </PopoverTrigger>\n                                                            <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                                                            <Calendar\n                                                                mode=\"single\"\n                                                                selected={field.value}\n                                                                onSelect={field.onChange}\n                                                                disabled={(date) =>\n                                                                date > new Date() || date < new Date(\"1900-01-01\")\n                                                                }\n                                                                initialFocus\n                                                            />\n                                                            </PopoverContent>\n                                                        </Popover>\n                                                        <FormMessage />\n                                                    </FormItem>\n                                                )}\n                                            />\n                                        </div>\n                                    </div>\n                                    \n                                     <div className=\"col-span-2\">\n                                        <FormField\n                                            control={form.control}\n                                            name=\"trades.0.instrument\"\n                                            render={({ field }) => (\n                                                <FormItem>\n                                                    <FormControl>\n                                                        <RadioGroup\n                                                            onValueChange={(value) => {\n                                                                field.onChange(value);\n                                                                calculatePnl();\n                                                            }}\n                                                            value={field.value}\n                                                            className=\"flex items-center space-x-2\"\n                                                        >\n                                                            {instrumentOptions.map((opt) => (\n                                                                <FormItem key={opt} className=\"flex items-center space-x-1 space-y-0\">\n                                                                    <FormControl>\n                                                                        <RadioGroupItem value={opt} id={opt} className=\"peer sr-only\" />\n                                                                    </FormControl>\n                                                                    <FormLabel\n                                                                        htmlFor={opt}\n                                                                        className=\"flex h-7 cursor-pointer items-center justify-center rounded-none border border-input bg-transparent px-2 py-1 text-xs font-medium ring-offset-background hover:bg-accent hover:text-accent-foreground peer-data-[state=checked]:border-primary peer-data-[state=checked]:bg-primary peer-data-[state=checked]:text-primary-foreground\"\n                                                                    >\n                                                                        {opt}\n                                                                    </FormLabel>\n                                                                </FormItem>\n                                                            ))}\n                                                        </RadioGroup>\n                                                    </FormControl>\n                                                    <FormMessage />\n                                                </FormItem>\n                                            )}\n                                        />\n                                    </div>\n\n                                    <div className=\"grid grid-cols-2 gap-x-4 gap-y-2 col-span-2\">\n                                        <TradeDataField label=\"Entry\">\n                                            <FormField\n                                                control={form.control}\n                                                name=\"trades.0.entryTime\"\n                                                render={({ field }) => <Input type=\"time\" {...field} />}\n                                            />\n                                        </TradeDataField>\n                                        <TradeDataField label=\"Exit\">\n                                            <FormField\n                                                control={form.control}\n                                                name=\"trades.0.exitTime\"\n                                                render={({ field }) => <Input type=\"time\" {...field} />}\n                                            />\n                                        </TradeDataField>\n                                        \n                                        <TradeDataField label=\"Contracts\">\n                                            <FormField\n                                            control={form.control}\n                                            name=\"trades.0.contracts\"\n                                            render={({ field }) => <Input type=\"number\" placeholder=\"0\" {...field} value={field.value ?? ''} onChange={(e) => {field.onChange(e.target.valueAsNumber); calculatePnl();}} />}\n                                            />\n                                        </TradeDataField>\n\n                                        <TradeDataField label=\"Points\">\n                                            <FormField\n                                                control={form.control}\n                                                name=\"trades.0.totalPoints\"\n                                                render={({ field }) => <Input type=\"number\" placeholder=\"0\" {...field} value={field.value ?? ''} onChange={(e) => {field.onChange(e.target.valueAsNumber); calculatePnl();}} />}\n                                            />\n                                        </TradeDataField>\n                                        \n                                        <TradeDataField label=\"TP\">\n                                            <FormField\n                                            control={form.control}\n                                            name=\"trades.0.tradeTp\"\n                                            render={({ field }) => <Input type=\"number\" placeholder=\"TP\" {...field} value={field.value ?? ''} />}\n                                            />\n                                        </TradeDataField>\n                                        \n                                        <TradeDataField label=\"SL\">\n                                            <FormField\n                                            control={form.control}\n                                            name=\"trades.0.tradeSl\"\n                                            render={({ field }) => <Input type=\"number\" placeholder=\"SL\" {...field} value={field.value ?? ''} />}\n                                            />\n                                        </TradeDataField>\n                                    </div>\n                                </CardContent>\n                            </Card>\n                            <Card className=\"flex-1 flex flex-col\">\n                                <CardHeader>\n                                    <CardTitle className=\"font-headline text-base\">Notes</CardTitle>\n                                </CardHeader>\n                                <CardContent className=\"p-4 pt-0 flex-1\">\n                                    <FormField\n                                        control={form.control}\n                                        name=\"notes\"\n                                        render={({ field }) => (\n                                            <FormItem className=\"h-full\">\n                                            <FormControl>\n                                                <Textarea className=\"bg-transparent border-0 p-0 focus-visible:ring-0 text-base h-full resize-none\" placeholder=\"General notes for the day...\" {...field} />\n                                            </FormControl>\n                                            <FormMessage />\n                                            </FormItem>\n                                        )}\n                                    />\n                                </CardContent>\n                            </Card>\n                        </div>\n                        <div className=\"flex flex-col space-y-6\">\n                            <Card onPaste={handleImagePaste} className=\"overflow-hidden flex-1 flex flex-col group\">\n                                <CardContent className=\"p-0 flex-1 flex flex-col relative\">\n                                    {analysisImage ? (\n                                        <div className=\"w-full h-full relative overflow-hidden\">\n                                            <div className=\"absolute\" style={{top: '-40px', bottom: '-30px', left: '-40px', right: '-40px'}}>\n                                                <Image src={analysisImage} alt=\"Trade analysis\" layout=\"fill\" objectFit=\"cover\" />\n                                            </div>\n                                            <Button\n                                                type=\"button\"\n                                                variant=\"destructive\"\n                                                size=\"icon\"\n                                                className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity z-10\"\n                                                onClick={handleRemoveImage}\n                                            >\n                                                <Trash2 className=\"h-4 w-4\" />\n                                                <span className=\"sr-only\">Remove image</span>\n                                            </Button>\n                                        </div>\n                                    ) : (\n                                        <div className=\"flex flex-col items-center justify-center gap-2 text-muted-foreground h-full\">\n                                            <Upload className=\"h-8 w-8\" />\n                                            <p className=\"text-sm font-medium\">Paste or upload an image of your trade.</p>\n                                            <Button type=\"button\" variant=\"outline\" size=\"sm\" onClick={() => fileInputRef.current?.click()}>\n                                                Upload File\n                                            </Button>\n                                            <input\n                                                type=\"file\"\n                                                ref={fileInputRef}\n                                                onChange={handleImageUpload}\n                                                className=\"hidden\"\n                                                accept=\"image/*\"\n                                            />\n                                        </div>\n                                    )}\n                                </CardContent>\n                            </Card>\n                           <Card>\n                                <CardHeader>\n                                    <CardTitle className=\"font-headline text-base\">SEASONS</CardTitle>\n                                </CardHeader>\n                                <CardContent className=\"p-4 pt-0 space-y-2\">\n                                     <div className=\"grid grid-cols-5 gap-2 text-xs text-muted-foreground font-medium\">\n                                        <div className=\"col-span-1\">Session</div>\n                                        <div className=\"col-span-1\">Move</div>\n                                        <div className=\"col-span-1\">Direction</div>\n                                        <div className=\"col-span-1\">Sweep</div>\n                                        <div className=\"col-span-1\">Target</div>\n                                    </div>\n                                    {(form.watch('trades.0.sessions') || []).map((session, index) => (\n                                        <div key={index} className=\"grid grid-cols-5 gap-2 items-center\">\n                                            <h3 className=\"font-headline text-sm col-span-1\">{session.sessionName}</h3>\n                                            <div className=\"col-span-1\">\n                                                <FormField\n                                                    control={form.control}\n                                                    name={`trades.0.sessions.${index}.movementType`}\n                                                    render={({ field }) => (\n                                                        <FormItem>\n                                                            <Select onValueChange={field.onChange} value={field.value || \"none\"}>\n                                                                <FormControl>\n                                                                    <SelectTrigger className=\"h-8 text-xs\"><SelectValue placeholder=\"Move...\" /></SelectTrigger>\n                                                                </FormControl>\n                                                                <SelectContent>\n                                                                    <SelectItem value=\"none\">-</SelectItem>\n                                                                    {movementTypeOptions.map(opt => <SelectItem key={opt.value} value={opt.value}>{opt.label}</SelectItem>)}\n                                                                </SelectContent>\n                                                            </Select>\n                                                        </FormItem>\n                                                    )}\n                                                />\n                                            </div>\n                                            <div className=\"col-span-1\">\n                                                <FormField\n                                                    control={form.control}\n                                                    name={`trades.0.sessions.${index}.direction`}\n                                                    render={({ field }) => (\n                                                        <FormItem>\n                                                            <Select onValueChange={field.onChange} value={field.value || \"none\"}>\n                                                                <FormControl>\n                                                                    <SelectTrigger className=\"h-8 text-xs\"><SelectValue placeholder=\"Direction...\" /></SelectTrigger>\n                                                                </FormControl>\n                                                                <SelectContent>\n                                                                    <SelectItem value=\"none\">-</SelectItem>\n                                                                    {directionOptions.map(opt => <SelectItem key={opt.value} value={opt.value}>{opt.label}</SelectItem>)}\n                                                                </SelectContent>\n                                                            </Select>\n                                                        </FormItem>\n                                                    )}\n                                                />\n                                            </div>\n                                            <div className=\"col-span-1\">\n                                                <FormField\n                                                    control={form.control}\n                                                    name={`trades.0.sessions.${index}.tookHighLow`}\n                                                    render={({ field }) => (\n                                                        <FormItem>\n                                                            <Select onValueChange={field.onChange} value={field.value || \"none\"}>\n                                                                <FormControl>\n                                                                    <SelectTrigger className=\"h-8 text-xs\"><SelectValue placeholder=\"Sweep...\" /></SelectTrigger>\n                                                                </FormControl>\n                                                                <SelectContent>\n                                                                    <SelectItem value=\"none\">-</SelectItem>\n                                                                    {tookHighLowOptions.map(opt => <SelectItem key={opt.value} value={opt.value}>{opt.label}</SelectItem>)}\n                                                                </SelectContent>\n                                                            </Select>\n                                                        </FormItem>\n                                                    )}\n                                                />\n                                            </div>\n                                            <div className=\"col-span-1\">\n                                                <FormField\n                                                    control={form.control}\n                                                    name={`trades.0.sessions.${index}.targetSession`}\n                                                    render={({ field }) => (\n                                                        <FormItem>\n                                                            <Select onValueChange={field.onChange} value={field.value || \"none\"}>\n                                                                <FormControl>\n                                                                    <SelectTrigger className=\"h-8 text-xs\"><SelectValue placeholder=\"Target...\" /></SelectTrigger>\n                                                                </FormControl>\n                                                                <SelectContent>\n                                                                    <SelectItem value=\"none\">-</SelectItem>\n                                                                    {targetSessionOptions.map(opt => <SelectItem key={opt.value} value={opt.value}>{opt.label}</SelectItem>)}\n                                                                </SelectContent>\n                                                            </Select>\n                                                        </FormItem>\n                                                    )}\n                                                />\n                                            </div>\n                                        </div>\n                                    ))}\n                                </CardContent>\n                           </Card>\n                        </div>\n                    </div>\n                </form>\n            </Form>\n        </main>\n    </div>\n  );\n}\n\n\n    \n\n    \n\n    \n\n    \n\n    "],"names":[],"mappings":"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","debugId":null}}]
}